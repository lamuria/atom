(function() {
  var helpers;

  helpers = require('./spec-helper');

  describe("the input element", function() {
    var editor, editorElement, exState, getCommandEditor, getVisibility, vimState, _ref;
    _ref = [], editor = _ref[0], editorElement = _ref[1], vimState = _ref[2], exState = _ref[3];
    beforeEach(function() {
      var exMode, vimMode;
      vimMode = atom.packages.loadPackage('vim-mode');
      exMode = atom.packages.loadPackage('ex-mode');
      waitsForPromise(function() {
        var activationPromise;
        activationPromise = exMode.activate();
        helpers.activateExMode();
        return activationPromise;
      });
      runs(function() {
        return spyOn(exMode.mainModule.globalExState, 'setVim').andCallThrough();
      });
      waitsForPromise(function() {
        return vimMode.activate();
      });
      waitsFor(function() {
        return exMode.mainModule.globalExState.setVim.calls.length > 0;
      });
      return runs(function() {
        return helpers.getEditorElement(function(element) {
          atom.commands.dispatch(element, "ex-mode:open");
          editorElement = element;
          editor = editorElement.getModel();
          atom.commands.dispatch(getCommandEditor(), "core:cancel");
          vimState = vimMode.mainModule.getEditorState(editor);
          exState = exMode.mainModule.exStates.get(editor);
          vimState.activateNormalMode();
          vimState.resetNormalMode();
          return editor.setText("abc\ndef\nabc\ndef");
        });
      });
    });
    afterEach(function() {
      return atom.commands.dispatch(getCommandEditor(), "core:cancel");
    });
    getVisibility = function() {
      return editor.normalModeInputView.panel.visible;
    };
    getCommandEditor = function() {
      return editor.normalModeInputView.editorElement;
    };
    it("opens with 'ex-mode:open'", function() {
      atom.commands.dispatch(editorElement, "ex-mode:open");
      return expect(getVisibility()).toBe(true);
    });
    it("closes with 'core:cancel'", function() {
      atom.commands.dispatch(editorElement, "ex-mode:open");
      expect(getVisibility()).toBe(true);
      atom.commands.dispatch(getCommandEditor(), "core:cancel");
      return expect(getVisibility()).toBe(false);
    });
    it("closes when opening and then pressing backspace", function() {
      atom.commands.dispatch(editorElement, "ex-mode:open");
      expect(getVisibility()).toBe(true);
      atom.commands.dispatch(getCommandEditor(), "core:backspace");
      return expect(getVisibility()).toBe(false);
    });
    it("doesn't close when there is text and pressing backspace", function() {
      var commandEditor, model;
      atom.commands.dispatch(editorElement, "ex-mode:open");
      expect(getVisibility()).toBe(true);
      commandEditor = getCommandEditor();
      model = commandEditor.getModel();
      model.setText('abc');
      atom.commands.dispatch(commandEditor, "core:backspace");
      expect(getVisibility()).toBe(true);
      return expect(model.getText()).toBe('ab');
    });
    return it("closes when there is text and pressing backspace multiple times", function() {
      var commandEditor, model;
      atom.commands.dispatch(editorElement, "ex-mode:open");
      expect(getVisibility()).toBe(true);
      commandEditor = getCommandEditor();
      model = commandEditor.getModel();
      model.setText('abc');
      atom.commands.dispatch(commandEditor, "core:backspace");
      expect(getVisibility()).toBe(true);
      expect(model.getText()).toBe('ab');
      atom.commands.dispatch(commandEditor, "core:backspace");
      expect(getVisibility()).toBe(true);
      expect(model.getText()).toBe('a');
      atom.commands.dispatch(commandEditor, "core:backspace");
      expect(getVisibility()).toBe(true);
      expect(model.getText()).toBe('');
      atom.commands.dispatch(commandEditor, "core:backspace");
      return expect(getVisibility()).toBe(false);
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL21hcmNvc2xhbXVyaWEvLmF0b20vcGFja2FnZXMvZXgtbW9kZS9zcGVjL2V4LWlucHV0LXNwZWMuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLE9BQUE7O0FBQUEsRUFBQSxPQUFBLEdBQVUsT0FBQSxDQUFRLGVBQVIsQ0FBVixDQUFBOztBQUFBLEVBQ0EsUUFBQSxDQUFTLG1CQUFULEVBQThCLFNBQUEsR0FBQTtBQUM1QixRQUFBLCtFQUFBO0FBQUEsSUFBQSxPQUE2QyxFQUE3QyxFQUFDLGdCQUFELEVBQVMsdUJBQVQsRUFBd0Isa0JBQXhCLEVBQWtDLGlCQUFsQyxDQUFBO0FBQUEsSUFDQSxVQUFBLENBQVcsU0FBQSxHQUFBO0FBQ1QsVUFBQSxlQUFBO0FBQUEsTUFBQSxPQUFBLEdBQVUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFkLENBQTBCLFVBQTFCLENBQVYsQ0FBQTtBQUFBLE1BQ0EsTUFBQSxHQUFTLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBZCxDQUEwQixTQUExQixDQURULENBQUE7QUFBQSxNQUVBLGVBQUEsQ0FBZ0IsU0FBQSxHQUFBO0FBQ2QsWUFBQSxpQkFBQTtBQUFBLFFBQUEsaUJBQUEsR0FBb0IsTUFBTSxDQUFDLFFBQVAsQ0FBQSxDQUFwQixDQUFBO0FBQUEsUUFDQSxPQUFPLENBQUMsY0FBUixDQUFBLENBREEsQ0FBQTtlQUVBLGtCQUhjO01BQUEsQ0FBaEIsQ0FGQSxDQUFBO0FBQUEsTUFPQSxJQUFBLENBQUssU0FBQSxHQUFBO2VBQ0gsS0FBQSxDQUFNLE1BQU0sQ0FBQyxVQUFVLENBQUMsYUFBeEIsRUFBdUMsUUFBdkMsQ0FBZ0QsQ0FBQyxjQUFqRCxDQUFBLEVBREc7TUFBQSxDQUFMLENBUEEsQ0FBQTtBQUFBLE1BVUEsZUFBQSxDQUFnQixTQUFBLEdBQUE7ZUFDZCxPQUFP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

//# sourceURL=/Users/marcoslamuria/.atom/packages/ex-mode/spec/ex-input-spec.coffee
