{"mode":"editor","version":1,"windowDimensions":{"x":240,"y":23,"width":1024,"height":773,"maximized":false},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/marcoslamuria/Documents/rupeal/invoicexpress/vendor/plugins/active_merchant/test/unit/gateways"],"buffers":[{"text":"require 'test_helper'\n\nclass MerchantWareTest < Test::Unit::TestCase\n  def setup\n    @gateway = MerchantWareGateway.new(\n                 :login => 'login',\n                 :password => 'password',\n                 :name => 'name'\n               )\n\n    @credit_card = credit_card\n    @amount = 100\n    \n    @options = { \n      :order_id => '1',\n      :billing_address => address\n    }\n  end\n  \n  def test_successful_authorization\n    @gateway.expects(:ssl_post).returns(successful_authorization_response)\n    \n    assert response = @gateway.authorize(@amount, @credit_card, @options)\n    assert_instance_of Response, response\n    assert_success response\n    \n    assert_equal '4706382;1', response.authorization\n    assert_equal \"APPROVED\", response.message\n    assert response.test?\n  end\n  \n  def test_soap_fault_during_authorization\n    response_500 = stub(:code => \"500\", :message => \"Internal Server Error\", :body => fault_authorization_response)\n    @gateway.expects(:ssl_post).raises(ActiveMerchant::ResponseError.new(response_500))\n    \n    assert response = @gateway.authorize(@amount, @credit_card, @options)\n    assert_instance_of Response, response\n    assert_failure response\n    assert response.test?\n    \n    assert_nil response.authorization\n    assert_equal \"Server was unable to process request. ---> strPAN should be at least 13 to at most 19 characters in size. Parameter name: strPAN\", response.message\n    assert_equal response_500.code, response.params[\"http_code\"]\n    assert_equal response_500.message, response.params[\"http_message\"]\n  end\n    \n  def test_failed_authorization\n    @gateway.expects(:ssl_post).returns(failed_authorization_response)\n    \n    assert response = @gateway.authorize(@amount, @credit_card, @options)\n    assert_instance_of Response, response\n    assert_failure response\n    assert response.test?\n    \n    assert_nil response.authorization\n    assert_equal \"transaction type not supported by version\", response.message\n    assert_equal \"FAILED\", response.params[\"status\"]\n    assert_equal \"1014\", response.params[\"failure_code\"]\n  end\n\n  def test_credit\n    @gateway.expects(:ssl_post).with(anything, regexp_matches(/<strPAN>#{@credit_card.number}<\\//), anything).returns(\"\")\n    @gateway.expects(:parse).returns({})\n    @gateway.credit(@amount, @credit_card, @options)\n  end\n  \n  def test_deprecated_credit\n    @gateway.expects(:ssl_post).with(anything, regexp_matches(/<strReferenceCode>transaction_id<\\//), anything).returns(\"\")\n    @gateway.expects(:parse).returns({})\n    assert_deprecation_warning(Gateway::CREDIT_DEPRECATION_MESSAGE, @gateway) do\n      @gateway.credit(@amount, \"transaction_id\", @options)\n    end\n  end\n  \n  def test_refund\n    @gateway.expects(:ssl_post).with(anything, regexp_matches(/<strReferenceCode>transaction_id<\\//), anything).returns(\"\")\n    @gateway.expects(:parse).returns({})\n    @gateway.refund(@amount, \"transaction_id\", @options)\n  end\n  \n  def test_failed_void\n    @gateway.expects(:ssl_post).returns(failed_void_response)\n    \n    assert response = @gateway.void(\"1\")\n    assert_instance_of Response, response\n    assert_failure response\n    assert response.test?\n    \n    assert_nil response.authorization\n    assert_equal \"decline\", response.message\n    assert_equal \"DECLINED\", response.params[\"status\"]\n    assert_equal \"1012\", response.params[\"failure_code\"]\n  end\n  \n  def test_avs_result\n    @gateway.expects(:ssl_post).returns(successful_authorization_response)\n    \n    response = @gateway.authorize(@amount, @credit_card, @options)\n    assert_equal 'N', response.avs_result['code']\n  end\n  \n  def test_cvv_result\n    @gateway.expects(:ssl_post).returns(successful_authorization_response)\n    \n    response = @gateway.authorize(@amount, @credit_card, @options)\n    assert_equal 'M', response.cvv_result['code']\n  end\n  \n  private\n  \n  def successful_authorization_response\n    <<-XML\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n  <soap:Body>\n    <IssueKeyedPreAuthResponse xmlns=\"http://merchantwarehouse.com/MerchantWARE/Client/TransactionRetail\">\n      <IssueKeyedPreAuthResult>\n        <ReferenceID>4706382</ReferenceID>\n        <OrderNumber>1</OrderNumber>\n        <TXDate>7/3/2009 2:05:04 AM</TXDate>\n        <ApprovalStatus>APPROVED</ApprovalStatus>\n        <AuthCode>VI0100</AuthCode>\n        <CardHolder>Longbob Longsen</CardHolder>\n        <Amount>1.00</Amount>\n        <Type>5</Type>\n        <CardNumber>************4242</CardNumber>\n        <CardType>0</CardType>\n        <AVSResponse>N</AVSResponse>\n        <CVResponse>M</CVResponse>\n        <POSEntryType>1</POSEntryType>\n      </IssueKeyedPreAuthResult>\n    </IssueKeyedPreAuthResponse>\n  </soap:Body>\n</soap:Envelope>\n    XML\n  end\n  \n  def fault_authorization_response\n    <<-XML\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n  <soap:Body>\n    <soap:Fault>\n      <faultcode>soap:Server</faultcode>\n      <faultstring>Server was unable to process request. ---&gt; strPAN should be at least 13 to at most 19 characters in size.\nParameter name: strPAN</faultstring>\n      <detail/>\n    </soap:Fault>\n  </soap:Body>\n</soap:Envelope>\n    XML\n  end\n  \n  def failed_authorization_response\n    <<-XML\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n  <soap:Body>\n    <IssueKeyedPreAuthResponse xmlns=\"http://merchantwarehouse.com/MerchantWARE/Client/TransactionRetail\">\n      <IssueKeyedPreAuthResult>\n        <ReferenceID/>\n        <OrderNumber>1</OrderNumber>\n        <TXDate>7/3/2009 3:04:33 AM</TXDate>\n        <ApprovalStatus>FAILED;1014;transaction type not supported by version</ApprovalStatus>\n        <AuthCode/>\n        <CardHolder>Longbob Longsen</CardHolder>\n        <Amount>1.00</Amount>\n        <Type>5</Type>\n        <CardNumber>*********0123</CardNumber>\n        <CardType>0</CardType>\n        <AVSResponse/>\n        <CVResponse/>\n        <POSEntryType>1</POSEntryType>\n      </IssueKeyedPreAuthResult>\n    </IssueKeyedPreAuthResponse>\n  </soap:Body>\n</soap:Envelope>\n    XML\n  end\n  \n  def failed_void_response\n    <<-XML\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n  <soap:Body>\n    <IssueVoidResponse xmlns=\"http://merchantwarehouse.com/MerchantWARE/Client/TransactionRetail\">\n      <IssueVoidResult>\n        <ReferenceID>4707277</ReferenceID>\n        <OrderNumber/>\n        <TXDate>7/3/2009 3:28:38 AM</TXDate>\n        <ApprovalStatus>DECLINED;1012;decline</ApprovalStatus>\n        <AuthCode/>\n        <CardHolder/>\n        <Amount/>\n        <Type>3</Type>\n        <CardNumber/>\n        <CardType>0</CardType>\n        <AVSResponse/>\n        <CVResponse/>\n        <POSEntryType>0</POSEntryType>\n      </IssueVoidResult>\n    </IssueVoidResponse>\n  </soap:Body>\n</soap:Envelope>\n    XML\n  end\n    \nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":4,"goalScreenRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History","version":1},"encoding":"utf8","filePath":"/Users/marcoslamuria/Documents/rupeal/invoicexpress/vendor/plugins/active_merchant/test/unit/gateways/merchant_ware_test.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"e8e402cd94e4a06210bba27a265f194aa16200b0","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":4,"softTabs":true,"displayBuffer":{"id":5,"softWrapped":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/marcoslamuria/Documents/rupeal/invoicexpress/vendor/plugins/active_merchant/test/unit/gateways/merchant_ware_test.rb","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/marcoslamuria/Documents/rupeal/invoicexpress/vendor/plugins/active_merchant/test/unit/gateways/merchant_ware_test.rb","focused":false,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-ruby","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/marcoslamuria/Documents/rupeal/invoicexpress/vendor/plugins/active_merchant/test/unit/gateways/merchant_ware_test.rb":1428177533946},"metrics":{"sessionLength":1739},"tree-view":{"directoryExpansionStates":{"/Users/marcoslamuria/Documents/rupeal/invoicexpress/vendor/plugins/active_merchant/test/unit/gateways":{"isExpanded":true,"entries":{"paypal":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/marcoslamuria/Documents/rupeal/invoicexpress/vendor/plugins/active_merchant/test/unit/gateways/merchant_ware_test.rb","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}