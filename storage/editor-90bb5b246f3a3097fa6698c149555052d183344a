{"mode":"editor","version":1,"windowDimensions":{"x":240,"y":23,"width":1024,"height":773,"maximized":false},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/marcoslamuria/Documents/rupeal/clanhr/directory-api/test/clanhr/directory_api/core"],"buffers":[{"id":"439761822f0b411b9ccc7d48b65587f0","text":"","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2}},"nextMarkerLayerId":3,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","preferredLineEnding":null,"nextMarkerId":2,"deserializer":"TextBuffer","version":5},{"id":"f368ba10db4ed073428565b3c1f7d30f","text":"(ns clanhr.directory-api.core.list-users-test\n  (use clojure.test)\n  (require [clanhr.directory-api.models.user :as user-model]\n           [clanhr.directory-api.models.account :as account-model]\n           [clanhr.directory-api.core.new-registration :as new-registration]\n           [clanhr.directory-api.core.save-user-data :as save-user-data]\n           [clanhr.directory-api.core.data.new-account :as new-account-data]\n           [clanhr.directory-api.core.list-users :as list-users]\n           [clanhr.directory-api.gateways.common :as common-gateway]\n           [clanhr.directory-api.gateways.user-gateway :as user-gateway]\n           [clanhr.directory-api.core.new-registration-test :as new-registration-test]\n           [clanhr.directory-api.gateways.account-gateway :as account-gateway]\n           [result.core :as result]))\n\n(use-fixtures :each common-gateway/setup-test-database!)\n\n(defn new-user\n  [principal]\n  (let [data {:personal-data {:name \"Peter Parker\"}}\n        result (save-user-data/run! principal nil :personal-data data)]\n    result))\n\n(defn create-9-users\n  \"Create 9 users\"\n  [principal]\n  (dotimes [n 9] (new-user principal)))\n\n(deftest merge-defaults-test\n  (let [result (list-users/merge-defaults {})]\n    (is (= 10 (:per-page result)))\n    (is (= 1 (:page result)))))\n\n(deftest list-users-test\n  (let [first-new-account (new-account-data/generate-data)\n        second-new-account (new-account-data/generate-data)\n        user (:user first-new-account)\n        user-second-account (:user second-new-account)\n        new-registration-result (new-registration/run! first-new-account)\n        second-new-registration-result (new-registration/run! second-new-account)]\n    (is (result/succeeded? new-registration-result))\n    (is (result/succeeded? second-new-registration-result))\n    (testing \"first account\"\n\n      (let [user-id (get-in new-registration-result [:user :_id])\n            query {:account (get-in new-registration-result [:account :_id])\n                   :per-page 10\n                   :user-id user-id\n                   :page 1}\n            result (list-users/run! query)\n            current-page (:current-page result)\n            number-of-pages (:number-of-pages result)\n            users (:data result)\n            first-user (first users)]\n        (is (result/succeeded? result))\n        (is (= (:page query) current-page))\n        (is (= 1 number-of-pages))\n        (is (= 1 (count users)))\n        (is (nil? (get-in first-user [:system :password])))\n        (is (= (user-model/name user)\n               (user-model/name first-user)))\n        (is (= (user-model/company-email user)\n               (user-model/company-email first-user)))))\n\n    (testing \"second account\"\n\n      (let [user-id (get-in second-new-registration-result [:user :_id])\n            query {:account (get-in second-new-registration-result [:account :_id])\n                   :per-page 10\n                   :user-id user-id\n                   :page 1}\n            result (list-users/run! query)\n            current-page (:current-page result)\n            number-of-pages (:number-of-pages result)\n            users (:data result)\n            first-user (first users)]\n        (is (result/succeeded? result))\n        (is (= (:page query) current-page))\n        (is (= 1 number-of-pages))\n        (is (= 1 (count users)))\n        (is (= (user-model/name user-second-account)\n               (user-model/name first-user)))\n        (is (= (user-model/company-email user-second-account)\n               (user-model/company-email first-user)))))\n\n    (testing \"10 users in same account\"\n\n      (let [user-id (get-in new-registration-result [:user :_id])\n            query {:account (get-in new-registration-result [:account :_id])\n                   :per-page 10\n                   :user-id user-id\n                   :page 1}\n            result-of-9-new-users (create-9-users query)\n            result (list-users/run! query)\n            current-page (:current-page result)\n            number-of-pages (:number-of-pages result)\n            users (:data result)]\n        (is (= (:page query) current-page))\n        (is (= 1 number-of-pages))\n        (is (= 10 (count users)))))))\n\n(defn create-named-users\n  \"Create named users\"\n  [principal]\n  (let [first-data {:personal-data {:name \"Peter Parker\"}\n                    :company-data {:teams [\"team1\" \"team2\"]\n                                   :projects [\"project1\" \"project2\"]\n                                   :approver-name \"Bubu\"\n                                   :approver-id \"123\"\n                                   :position \"position1\"}\n                    :system {:status \"active\"\n                             :account (:account principal)}}\n        first-result (save-user-data/run! principal nil nil first-data)\n        second-data {:personal-data {:name \"Alonso\"}\n                     :company-data {:teams [\"team3\" \"team4\"]\n                                    :projects [\"project3\" \"project4\"]}\n                     :system {:status \"active\"\n                              :account (:account principal)}}\n        second-result (save-user-data/run! principal nil nil second-data)]\n    [first-result second-result]))\n\n(deftest search-users-test\n  (let [first-new-account (new-account-data/generate-data)\n        user (:user first-new-account)\n        new-registration-result (new-registration/run! first-new-account)\n        query {:account (get-in new-registration-result [:account :_id])\n               :user-id (get-in new-registration-result [:user :_id])\n               :per-page 10\n               :page 1}\n        result-creation (create-named-users query)]\n    (is (result/succeeded? new-registration-result))\n\n    (testing \"search by name\"\n      (let [query (assoc query :name \"Peter\")\n            result (list-users/run! query)\n            current-page (:current-page result)\n            number-of-pages (:number-of-pages result)\n            users (:data result)\n            first-user (first users)]\n        (is (result/succeeded? result))\n        (is (= (:page query) current-page))\n        (is (= 1 number-of-pages))\n        (is (= 1 (count users)))\n        (is (= \"Peter Parker\"\n               (user-model/name first-user)))))\n\n    (testing \"search by approver name\"\n      (let [query (assoc query :approver \"Bubu\")\n            result (list-users/run! query)\n            current-page (:current-page result)\n            number-of-pages (:number-of-pages result)\n            users (:data result)\n            first-user (first users)]\n        (is (result/succeeded? result))\n        (is (= (:page query) current-page))\n        (is (= 1 number-of-pages))\n        (is (= 1 (count users)))\n        (is (= \"Peter Parker\"\n               (user-model/name first-user)))))\n\n\n    (testing \"search by teams\"\n      (let [query (assoc query :teams [\"team3\"])\n            result (list-users/run! query)\n            current-page (:current-page result)\n            number-of-pages (:number-of-pages result)\n            users (:data result)\n            first-user (first users)]\n        (is (result/succeeded? result))\n        (is (= (:page query) current-page))\n        (is (= 1 number-of-pages))\n        (is (= 1 (count users)))\n        (is (= \"Alonso\"\n               (user-model/name first-user)))\n        (is (= [\"team3\" \"team4\"]\n               (user-model/teams first-user)))\n        ))\n\n    (testing \"search by projects\"\n      (let [query (assoc query :projects [\"project2\"])\n            result (list-users/run! query)\n            current-page (:current-page result)\n            number-of-pages (:number-of-pages result)\n            users (:data result)\n            first-user (first users)]\n        (is (result/succeeded? result))\n        (is (= (:page query) current-page))\n        (is (= 1 number-of-pages))\n        (is (= 1 (count users)))\n        (is (= \"Peter Parker\"\n               (user-model/name first-user)))\n        (is (= [\"project1\" \"project2\"]\n               (user-model/projects first-user)))))\n\n    (testing \"search by position\"\n      (let [query (assoc query :position \"position1\")\n            result (list-users/run! query)\n            current-page (:current-page result)\n            number-of-pages (:number-of-pages result)\n            users (:data result)\n            first-user (first users)]\n        (is (result/succeeded? result))\n        (is (= (:page query) current-page))\n        (is (= 1 number-of-pages))\n        (is (= 1 (count users)))\n        (is (= \"Peter Parker\"\n               (user-model/name first-user)))\n        ))\n    ))\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"12":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"13":{"range":{"start":{"row":12,"column":36},"end":{"row":12,"column":37}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"14":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"15":{"range":{"start":{"row":12,"column":36},"end":{"row":12,"column":37}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"16":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"17":{"range":{"start":{"row":12,"column":36},"end":{"row":12,"column":37}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2}},"nextMarkerLayerId":3,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/marcoslamuria/Documents/rupeal/clanhr/directory-api/test/clanhr/directory_api/core/list_users_test.clj","digestWhenLastPersisted":"436238674f6ac2b89fa8fc05be480cb66454f41a","preferredLineEnding":null,"nextMarkerId":18,"deserializer":"TextBuffer","version":5},{"id":"59bb632e61d5975839af2414dbe2947c","text":"(ns clanhr.directory-api.core.get-accounts-with-alerts-test\n  (use clojure.test)\n  (require [clanhr.directory-api.models.user :as user-model]\n           [clanhr.directory-api.models.account :as account-model]\n           [clanhr.directory-api.core.new-registration :as new-registration]\n           [clanhr.directory-api.gateways.common :as common-gateway]\n           [clanhr.directory-api.gateways.user-gateway :as user-gateway]\n           [clanhr.directory-api.core.get-user :as get-user]\n           [clanhr.directory-api.core.get-accounts-with-alerts :as get-accounts-with-alerts]\n           [clanhr.directory-api.core.data.new-account :as new-account-data]\n           [clanhr.directory-api.gateways.account-gateway :as account-gateway]\n           [result.core :as result]))\n\n(use-fixtures :each common-gateway/setup-test-database!)\n\n(deftest get-accounts-with-alerts-core-test\n  (let [data (new-account-data/generate-data)\n        register-result (new-registration/run! data)\n        result (get-accounts-with-alerts/run {})]\n    (is (result/succeeded? register-result))\n    (is (result/succeeded? result))\n    (is (get-in (first result) [:settings :alerts]))))\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"4":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"5":{"range":{"start":{"row":11,"column":36},"end":{"row":11,"column":37}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"8":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"9":{"range":{"start":{"row":11,"column":36},"end":{"row":11,"column":37}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"12":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"13":{"range":{"start":{"row":11,"column":36},"end":{"row":11,"column":37}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2}},"nextMarkerLayerId":3,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/marcoslamuria/Documents/rupeal/clanhr/directory-api/test/clanhr/directory_api/core/get_accounts_with_alerts.clj","digestWhenLastPersisted":"05acf154775741bdc92ec3dec4cad92345492ed6","preferredLineEnding":null,"nextMarkerId":14,"deserializer":"TextBuffer","version":5},{"id":"16fc8b7567d076cffe149cf26847af98","text":"(ns clanhr.directory-api.core.get-accounts-with-alerts-test\n  (use clojure.test)\n  (require [clanhr.directory-api.models.user :as user-model]\n           [clanhr.directory-api.models.account :as account-model]\n           [clanhr.directory-api.core.new-registration :as new-registration]\n           [clanhr.directory-api.gateways.common :as common-gateway]\n           [clanhr.directory-api.gateways.user-gateway :as user-gateway]\n           [clanhr.directory-api.core.get-user :as get-user]\n           [clanhr.directory-api.core.get-account-settings :as get-account-settings]\n           [clanhr.directory-api.core.data.new-account :as new-account-data]\n           [clanhr.directory-api.gateways.account-gateway :as account-gateway]\n           [result.core :as result]))\n\n(use-fixtures :each common-gateway/setup-test-database!)\n\n(deftest get-account-settings-core-test\n  (let [data (new-account-data/generate-data)\n        register-result (new-registration/run! data)\n        user (:user register-result)\n        principal {:account (user-model/account user)\n                   :user-id (user-model/id user)}\n        context {:principal principal}\n        result (get-account-settings/run context)]\n    (is (result/succeeded? register-result))\n    (is (result/succeeded? result))\n    (is (get-in result [:work-days :days-off]))\n    (is (get-in result [:work-days :holidays]))\n    (is (not= 0 (count (:absences result))))))\n\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"4":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"5":{"range":{"start":{"row":11,"column":36},"end":{"row":11,"column":37}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"8":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"9":{"range":{"start":{"row":11,"column":36},"end":{"row":11,"column":37}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2}},"nextMarkerLayerId":3,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/marcoslamuria/Documents/rupeal/clanhr/directory-api/test/clanhr/directory_api/core/get_accounts_with_alerts_test.clj","digestWhenLastPersisted":"e1464783831a699a1f7dae4eb751acb04e12e50f","preferredLineEnding":null,"nextMarkerId":10,"deserializer":"TextBuffer","version":5}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":4,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":5,"softWrapped":false,"editorWidthInChars":null,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferId":"439761822f0b411b9ccc7d48b65587f0"},"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":8,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":9,"softWrapped":false,"editorWidthInChars":null,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/marcoslamuria/Documents/rupeal/clanhr/directory-api/test/clanhr/directory_api/core/list_users_test.clj","bufferId":"f368ba10db4ed073428565b3c1f7d30f"},"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":12,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":13,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/marcoslamuria/Documents/rupeal/clanhr/directory-api/test/clanhr/directory_api/core/get_accounts_with_alerts.clj","bufferId":"59bb632e61d5975839af2414dbe2947c","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":16,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":17,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/marcoslamuria/Documents/rupeal/clanhr/directory-api/test/clanhr/directory_api/core/get_accounts_with_alerts_test.clj","bufferId":"16fc8b7567d076cffe149cf26847af98","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/Users/marcoslamuria/Documents/rupeal/clanhr/directory-api/test/clanhr/directory_api/core/get_accounts_with_alerts.clj","focused":true,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-clojure","language-hyperlink","language-todo"],"destroyedItemURIs":[]},"packageStates":{"fuzzy-finder":{"/Users/marcoslamuria/Documents/rupeal/clanhr/directory-api/test/clanhr/directory_api/core/list_users_test.clj":1456761793742,"/Users/marcoslamuria/Documents/rupeal/clanhr/directory-api/test/clanhr/directory_api/core/get_accounts_with_alerts.clj":1456761810004,"/Users/marcoslamuria/Documents/rupeal/clanhr/directory-api/test/clanhr/directory_api/core/get_accounts_with_alerts_test.clj":1456761809356},"metrics":{"sessionLength":4102},"tree-view":{"directoryExpansionStates":{"/Users/marcoslamuria/Documents/rupeal/clanhr/directory-api/test/clanhr/directory_api/core":{"isExpanded":true,"entries":{"data":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/marcoslamuria/Documents/rupeal/clanhr/directory-api/test/clanhr/directory_api/core/get_accounts_with_alerts.clj","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200},"tabs":[{}]},"fullScreen":false}