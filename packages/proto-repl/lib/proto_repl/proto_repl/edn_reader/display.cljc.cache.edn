;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name proto-repl.edn-reader.display, :imports nil, :requires {str clojure.string, clojure.string clojure.string, set clojure.set, clojure.set clojure.set}, :uses nil, :defs {value-map->printable-map {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/src/proto_repl/edn_reader/display.cljc", :line 63, :column 7, :end-line 63, :end-column 31, :arglists (quote ([vm])), :doc "Takes a map of var names to their values and returns the map with values\n   in a string format."}, :name proto-repl.edn-reader.display/value-map->printable-map, :variadic false, :file "src/proto_repl/edn_reader/display.cljc", :end-column 31, :method-params ([vm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([vm])), :doc "Takes a map of var names to their values and returns the map with values\n   in a string format."}, calculate-columns-widths {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/src/proto_repl/edn_reader/display.cljc", :line 112, :column 7, :end-line 112, :end-column 31, :arglists (quote ([max-widths])), :doc "Takes a map of widths for each column and returns a new map of widths such\n   that the values will fit within the max-table-width. Assumes that the number\n   of columns is possible to fit within the table."}, :name proto-repl.edn-reader.display/calculate-columns-widths, :variadic false, :file "src/proto_repl/edn_reader/display.cljc", :end-column 31, :method-params ([max-widths]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([max-widths])), :doc "Takes a map of widths for each column and returns a new map of widths such\n   that the values will fit within the max-table-width. Assumes that the number\n   of columns is possible to fit within the table."}, value-maps->table-rows {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/src/proto_repl/edn_reader/display.cljc", :line 174, :column 8, :end-line 174, :end-column 30, :private true, :arglists (quote ([value-maps])), :doc "Takes a set of maps containing variable names and values and returns a set\n   of string rows that will fit within the max-table-width. If the table has\n   too many columns to fit into the table it returns nil."}, :private true, :name proto-repl.edn-reader.display/value-maps->table-rows, :variadic false, :file "src/proto_repl/edn_reader/display.cljc", :end-column 30, :method-params ([value-maps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 174, :end-line 174, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value-maps])), :doc "Takes a set of maps containing variable names and values and returns a set\n   of string rows that will fit within the max-table-width. If the table has\n   too many columns to fit into the table it returns nil."}, min-column-width {:name proto-repl.edn-reader.display/min-column-width, :file "src/proto_repl/edn_reader/display.cljc", :line 16, :column 1, :end-line 16, :end-column 22, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/src/proto_repl/edn_reader/display.cljc", :line 16, :column 6, :end-line 16, :end-column 22}, :doc "The minimum size a column could be shrunk to is 1. That assumes 1 space for\n   data and 1 for an ellipsis. 'Xâ€¦'"}, max-value-widths {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/src/proto_repl/edn_reader/display.cljc", :line 77, :column 7, :end-line 77, :end-column 23, :arglists (quote ([keys value-maps])), :doc "Returns a map of the max lengths of all the given keys in the maps. Assumes\n   values in maps are strings."}, :name proto-repl.edn-reader.display/max-value-widths, :variadic false, :file "src/proto_repl/edn_reader/display.cljc", :end-column 23, :method-params ([keys value-maps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 2, :fn-var true, :arglists (quote ([keys value-maps])), :doc "Returns a map of the max lengths of all the given keys in the maps. Assumes\n   values in maps are strings."}, to-display-tree* {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/src/proto_repl/edn_reader/display.cljc", :line 40, :column 7, :end-line 40, :end-column 23, :arglists (quote ([v])), :doc "Converts a value into a displayable tree. "}, :name proto-repl.edn-reader.display/to-display-tree*, :variadic false, :file "src/proto_repl/edn_reader/display.cljc", :end-column 23, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Converts a value into a displayable tree. "}, row->str {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/src/proto_repl/edn_reader/display.cljc", :line 165, :column 7, :end-line 165, :end-column 15, :arglists (quote ([key-order value-map col-widths])), :doc "Takes a list of keys ordered for the row, a map of values for the row, and\n   the available space for each column and returns a string row with columns\n   separated by a pipe character."}, :name proto-repl.edn-reader.display/row->str, :variadic false, :file "src/proto_repl/edn_reader/display.cljc", :end-column 15, :method-params ([key-order value-map col-widths]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 3, :fn-var true, :arglists (quote ([key-order value-map col-widths])), :doc "Takes a list of keys ordered for the row, a map of values for the row, and\n   the available space for each column and returns a string row with columns\n   separated by a pipe character."}, common-keys {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/src/proto_repl/edn_reader/display.cljc", :line 69, :column 7, :end-line 69, :end-column 18, :arglists (quote ([maps])), :doc "Find the common set of keys in all of the maps"}, :name proto-repl.edn-reader.display/common-keys, :variadic false, :file "src/proto_repl/edn_reader/display.cljc", :end-column 18, :method-params ([maps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([maps])), :doc "Find the common set of keys in all of the maps"}, ellipsis {:name proto-repl.edn-reader.display/ellipsis, :file "src/proto_repl/edn_reader/display.cljc", :line 11, :column 1, :end-line 11, :end-column 14, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/src/proto_repl/edn_reader/display.cljc", :line 11, :column 6, :end-line 11, :end-column 14}, :doc "A single character ellipsis for truncating long values.\n   Unicode: U+2026, UTF-8: E2 80 A6"}, max-table-width {:name proto-repl.edn-reader.display/max-table-width, :file "src/proto_repl/edn_reader/display.cljc", :line 7, :column 1, :end-line 7, :end-column 21, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/src/proto_repl/edn_reader/display.cljc", :line 7, :column 6, :end-line 7, :end-column 21}, :doc "Sets the maximum width of a table in characters when "}, fit-value-to-width {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/src/proto_repl/edn_reader/display.cljc", :line 21, :column 7, :end-line 21, :end-column 25, :arglists (quote ([width value] [width value expand?])), :doc "Takes a width and a string value and returns the string so that it exactly\n   fits the width given. The value is truncated if it is too long with an\n   ellipsis or has spaces prepended.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([width value] [width value expand?]), :arglists ([width value] [width value expand?]), :arglists-meta (nil nil)}}, :name proto-repl.edn-reader.display/fit-value-to-width, :variadic false, :file "src/proto_repl/edn_reader/display.cljc", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([width value] [width value expand?]), :arglists ([width value] [width value expand?]), :arglists-meta (nil nil)}, :method-params ([width value] [width value expand?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 3, :fn-var true, :arglists ([width value] [width value expand?]), :doc "Takes a width and a string value and returns the string so that it exactly\n   fits the width given. The value is truncated if it is too long with an\n   ellipsis or has spaces prepended."}, col-widths->table-width {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/src/proto_repl/edn_reader/display.cljc", :line 101, :column 7, :end-line 101, :end-column 30, :arglists (quote ([widths])), :doc "Returns the size of the table based on a map of column to sizes"}, :name proto-repl.edn-reader.display/col-widths->table-width, :variadic false, :file "src/proto_repl/edn_reader/display.cljc", :end-column 30, :method-params ([widths]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([widths])), :doc "Returns the size of the table based on a map of column to sizes"}, saved-value-maps->display-tree {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/src/proto_repl/edn_reader/display.cljc", :line 204, :column 7, :end-line 204, :end-column 37, :arglists (quote ([value-maps])), :doc "A simpler display for value maps when they won't fit into a table"}, :name proto-repl.edn-reader.display/saved-value-maps->display-tree, :variadic false, :file "src/proto_repl/edn_reader/display.cljc", :end-column 37, :method-params ([value-maps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 204, :end-line 204, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value-maps])), :doc "A simpler display for value maps when they won't fit into a table"}, saved-value-maps->display-tree-table {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/src/proto_repl/edn_reader/display.cljc", :line 216, :column 7, :end-line 216, :end-column 43, :arglists (quote ([value-maps])), :doc "Takes a list of maps of variable names to values and converts it into a table\n   of each map showing the values. Each row can be expanded to show more details\n   of the values in the event any of them had to be truncated."}, :name proto-repl.edn-reader.display/saved-value-maps->display-tree-table, :variadic false, :file "src/proto_repl/edn_reader/display.cljc", :end-column 43, :method-params ([value-maps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 216, :end-line 216, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value-maps])), :doc "Takes a list of maps of variable names to values and converts it into a table\n   of each map showing the values. Each row can be expanded to show more details\n   of the values in the event any of them had to be truncated."}, value-map->display-tree-values {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/src/proto_repl/edn_reader/display.cljc", :line 196, :column 8, :end-line 196, :end-column 38, :private true, :arglists (quote ([value-map])), :doc "Takes a map of variable names and values and converts it into a displayable\n   tree of values."}, :private true, :name proto-repl.edn-reader.display/value-map->display-tree-values, :variadic false, :file "src/proto_repl/edn_reader/display.cljc", :end-column 38, :method-params ([value-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 196, :end-line 196, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value-map])), :doc "Takes a map of variable names and values and converts it into a displayable\n   tree of values."}, exception {:protocol-inline nil, :meta {:file "/Users/jason/work/github_workspace/proto-repl/proto-repl-client-cljs/src/proto_repl/edn_reader/display.cljc", :line 95, :column 7, :end-line 95, :end-column 16, :arglists (quote ([message])), :doc "Creates an exception with the given message"}, :name proto-repl.edn-reader.display/exception, :variadic false, :file "src/proto_repl/edn_reader/display.cljc", :end-column 16, :method-params ([message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([message])), :doc "Creates an exception with the given message"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc "Contains functions for converting EDN data structures into trees for display\n     in Atom Ink"}